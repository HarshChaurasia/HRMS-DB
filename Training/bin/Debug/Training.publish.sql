/*
Deployment script for Training Management

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Training Management"
:setvar DefaultFilePrefix "Training Management"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Admin]...';


GO
CREATE TABLE [dbo].[Admin] (
    [Id]       BIGINT        NOT NULL,
    [Name]     VARCHAR (50)  NOT NULL,
    [email_id] NVARCHAR (50) NULL,
    [Password] NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Course_certificate]...';


GO
CREATE TABLE [dbo].[Course_certificate] (
    [Certificate_id]       INT          NOT NULL,
    [Emp_id]               INT          NOT NULL,
    [Course_id]            INT          NOT NULL,
    [Certificate_Name]     VARCHAR (50) NOT NULL,
    [Certificate_Date]     DATE         NOT NULL,
    [Training_Name]        VARCHAR (50) NOT NULL,
    [Certificate_Abstract] VARCHAR (50) NOT NULL,
    [Training_org_name]    VARCHAR (50) NULL,
    [Course_coordinator]   VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Certificate_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Course_language]...';


GO
CREATE TABLE [dbo].[Course_language] (
    [Course_language_id] INT          NOT NULL,
    [Course_id]          INT          NULL,
    [Language]           VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Course_language_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Course_topics]...';


GO
CREATE TABLE [dbo].[Course_topics] (
    [Course_id]   BIGINT       NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NULL,
    [Contents]    VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Course_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Courses]...';


GO
CREATE TABLE [dbo].[Courses] (
    [Course_id]   BIGINT       NOT NULL,
    [Name]        VARCHAR (50) NOT NULL,
    [Duration]    DATETIME     NOT NULL,
    [Syallbus]    VARCHAR (50) NOT NULL,
    [Description] VARCHAR (50) NOT NULL,
    [Abstract]    VARCHAR (50) NULL,
    [Teacher_id]  BIGINT       NULL,
    PRIMARY KEY CLUSTERED ([Course_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Employee]...';


GO
CREATE TABLE [dbo].[Employee] (
    [Emp_id]        BIGINT        NOT NULL,
    [First_name]    VARCHAR (50)  NOT NULL,
    [Last_name]     VARCHAR (50)  NOT NULL,
    [Email_id]      NCHAR (50)    NOT NULL,
    [DOB]           DATE          NOT NULL,
    [Mob_no]        BIGINT        NOT NULL,
    [Address]       VARCHAR (100) NOT NULL,
    [Qualification] VARCHAR (50)  NULL,
    [Gender]        CHAR (10)     NULL,
    PRIMARY KEY CLUSTERED ([Emp_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[FAQ]...';


GO
CREATE TABLE [dbo].[FAQ] (
    [Faq_id]     BIGINT       NOT NULL,
    [Question]   VARCHAR (50) NOT NULL,
    [Answer]     VARCHAR (50) NOT NULL,
    [Decription] VARCHAR (50) NULL,
    [Emp_id]     BIGINT       NULL,
    PRIMARY KEY CLUSTERED ([Faq_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Reg_Training]...';


GO
CREATE TABLE [dbo].[Reg_Training] (
    [Training_id]   INT           NOT NULL,
    [Training_Name] VARCHAR (50)  NOT NULL,
    [Training_Type] NVARCHAR (50) NULL,
    [Duration]      DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([Training_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Teacher]...';


GO
CREATE TABLE [dbo].[Teacher] (
    [Teacher_id] BIGINT       NOT NULL,
    [Name]       VARCHAR (50) NOT NULL,
    [Email_id]   VARCHAR (50) NOT NULL,
    [Mob_no]     BIGINT       NULL,
    [Profession] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Teacher_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TestAnswer]...';


GO
CREATE TABLE [dbo].[TestAnswer] (
    [TestAnswerid]   INT NOT NULL,
    [TestQuestionid] INT NULL,
    PRIMARY KEY CLUSTERED ([TestAnswerid] ASC)
);


GO
PRINT N'Creating Table [dbo].[TestDetails]...';


GO
CREATE TABLE [dbo].[TestDetails] (
    [Test_id]        INT          NOT NULL,
    [TestQuestionid] INT          NOT NULL,
    [TestAnswerid]   INT          NOT NULL,
    [TestName]       VARCHAR (50) NOT NULL,
    [TestSummary]    VARCHAR (50) NOT NULL,
    [TestType]       VARCHAR (50) NOT NULL,
    [NoofQuestions]  BIGINT       NULL,
    [TestTime]       TIMESTAMP    NULL,
    PRIMARY KEY CLUSTERED ([Test_id] ASC)
);


GO
PRINT N'Creating Table [dbo].[TestQuestion]...';


GO
CREATE TABLE [dbo].[TestQuestion] (
    [TestQuestionid] INT NOT NULL,
    [TestAnswerid]   INT NULL,
    PRIMARY KEY CLUSTERED ([TestQuestionid] ASC)
);


GO
PRINT N'Creating Table [dbo].[TestStatus]...';


GO
CREATE TABLE [dbo].[TestStatus] (
    [TestStatusid] INT          NOT NULL,
    [Test_id]      INT          NOT NULL,
    [Emp_id]       INT          NOT NULL,
    [Test_name]    VARCHAR (50) NOT NULL,
    [TestDuration] TIMESTAMP    NOT NULL,
    [TotalScore]   DECIMAL (18) NOT NULL,
    [TestScore]    DECIMAL (18) NULL,
    [Result]       NCHAR (10)   NULL,
    PRIMARY KEY CLUSTERED ([TestStatusid] ASC)
);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2ac5e235-9878-4ac7-88b6-c0090525fac9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2ac5e235-9878-4ac7-88b6-c0090525fac9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ecb4de74-c326-4a19-994f-cc6e719f2b56')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ecb4de74-c326-4a19-994f-cc6e719f2b56')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '730671ee-6805-40bf-8524-a079f254707b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('730671ee-6805-40bf-8524-a079f254707b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2be9f3dc-fbb2-421f-bfe7-04c549a63ae0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2be9f3dc-fbb2-421f-bfe7-04c549a63ae0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'e33177bb-53d2-41be-9e8e-bffced0c1aa9')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('e33177bb-53d2-41be-9e8e-bffced0c1aa9')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '95e69129-2ffc-4fc6-9f49-531346e5a29f')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('95e69129-2ffc-4fc6-9f49-531346e5a29f')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '75059bd7-9003-4c58-9599-012f5ef381d1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('75059bd7-9003-4c58-9599-012f5ef381d1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '188ba930-b910-44d3-b855-e565f42f677b')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('188ba930-b910-44d3-b855-e565f42f677b')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '49b0deed-3668-431f-98e2-f0d04d49aad8')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('49b0deed-3668-431f-98e2-f0d04d49aad8')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5a090383-9adc-4aea-b372-a8b4752ef700')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5a090383-9adc-4aea-b372-a8b4752ef700')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '530e157f-fd28-40d3-a2af-2fe6ebd59e40')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('530e157f-fd28-40d3-a2af-2fe6ebd59e40')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '03e494bb-269d-4771-9501-321167f0fc91')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('03e494bb-269d-4771-9501-321167f0fc91')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'bc46078d-b626-42d1-93aa-925208b1cf77')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('bc46078d-b626-42d1-93aa-925208b1cf77')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
